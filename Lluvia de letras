<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lluvia de Letras Decorativas</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #1a2a6c, #b21f1f, #fdbb2d);
            color: white;
            min-height: 100vh;
            overflow-x: hidden;
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
            position: relative;
        }
        
        .container {
            max-width: 900px;
            width: 100%;
            z-index: 10;
            background: rgba(0, 0, 0, 0.7);
            padding: 30px;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(10px);
            margin-bottom: 20px;
        }
        
        header {
            text-align: center;
            margin-bottom: 30px;
        }
        
        h1 {
            font-size: 3rem;
            margin-bottom: 15px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
            background: linear-gradient(90deg, #ff6b6b, #ff8e8e, #ff6b6b);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        
        p.subtitle {
            font-size: 1.3rem;
            margin-bottom: 25px;
            opacity: 0.9;
        }
        
        .suggestions {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 12px;
            margin-top: 25px;
        }
        
        .suggestion-chip {
            padding: 10px 20px;
            background: rgba(255, 255, 255, 0.15);
            border-radius: 25px;
            cursor: pointer;
            transition: all 0.3s;
            font-weight: 500;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        .suggestion-chip:hover {
            background: rgba(255, 255, 255, 0.25);
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }
        
        .message {
            text-align: center;
            margin: 25px 0;
            font-size: 1.4rem;
            min-height: 45px;
            font-weight: 600;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
        }
        
        .loading {
            display: inline-block;
            width: 35px;
            height: 35px;
            border: 4px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: white;
            animation: spin 1s ease-in-out infinite;
            margin-right: 12px;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        .letter {
            position: absolute;
            font-size: 40px;
            font-weight: bold;
            user-select: none;
            z-index: 5;
            text-shadow: 2px 2px 8px rgba(0, 0, 0, 0.7);
            transition: transform 0.3s, text-shadow 0.3s;
        }
        
        .letter:hover {
            transform: scale(1.3) rotate(10deg);
            text-shadow: 4px 4px 12px rgba(0, 0, 0, 0.9);
            z-index: 20;
        }
        
        .image-counter {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: rgba(0, 0, 0, 0.7);
            padding: 10px 15px;
            border-radius: 20px;
            font-size: 1rem;
            z-index: 100;
        }
        
        .instructions {
            text-align: center;
            margin-top: 25px;
            font-size: 1.1rem;
            opacity: 0.9;
            max-width: 800px;
            line-height: 1.6;
            z-index: 10;
            position: relative;
        }
        
        .credit {
            margin-top: 15px;
            font-size: 0.9rem;
            opacity: 0.7;
        }
        
        .controls {
            display: flex;
            gap: 15px;
            margin-top: 20px;
            z-index: 10;
            position: relative;
        }
        
        .control-btn {
            padding: 10px 20px;
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 20px;
            color: white;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .control-btn:hover {
            background: rgba(255, 255, 255, 0.2);
        }
        
        #letters-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 1;
        }
        
        @media (max-width: 768px) {
            h1 {
                font-size: 2.4rem;
            }
            
            .letter {
                font-size: 35px;
            }
        }

        @media (max-width: 480px) {
            .container {
                padding: 20px;
            }
            
            h1 {
                font-size: 2rem;
            }
            
            .letter {
                font-size: 30px;
            }
            
            .suggestions {
                gap: 8px;
            }
            
            .suggestion-chip {
                padding: 8px 16px;
                font-size: 0.9rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>âœ¨ Lluvia de Letras Decorativas âœ¨</h1>
            <p class="subtitle">Selecciona un artista para disfrutar de una lluvia de letras con su nombre</p>
        </header>
        
        <div class="suggestions">
            <div class="suggestion-chip" data-search="Kevin Kaarl">Kevin Kaarl</div>
            <div class="suggestion-chip" data-search="Ed Maverick">Ed Maverick</div>
					   <div class="suggestion-chip" data-search="Polymilo">polymilo</div>
					   <div class="suggestion-chip" data-search="Choi san">Choi san</div>
					   <div class="suggestion-chip" data-search="Bang chan">Bang chan</div>
    
        </div>
        
        <div id="message" class="message">Haz clic en un artista para comenzar</div>
        
        <div class="controls">
            <button class="control-btn" id="pauseBtn">Pausar</button>
            <button class="control-btn" id="clearBtn">Limpiar</button>
            <button class="control-btn" id="speedUpBtn">Acelerar</button>
        </div>
    </div>
    
    <div id="letters-container"></div>
    
    <div class="image-counter" id="letterCounter">Letras: 0</div>
    
    <div class="instructions">
        <p>ðŸ’¡ Haz clic en un artista para ver una lluvia de letras con su nombre</p>
        <p>ðŸŽµ Las letras caerÃ¡n desde la parte superior de la pantalla</p>
        <p class="credit">Disfruta del espectÃ¡culo visual con nombres artÃ­sticos</p>
    </div>

    <script>
        // ConfiguraciÃ³n inicial
        const lettersContainer = document.getElementById('letters-container');
        const messageDiv = document.getElementById('message');
        const suggestionChips = document.querySelectorAll('.suggestion-chip');
        const pauseBtn = document.getElementById('pauseBtn');
        const clearBtn = document.getElementById('clearBtn');
        const speedUpBtn = document.getElementById('speedUpBtn');
        const letterCounter = document.getElementById('letterCounter');
        
        let isPaused = false;
        let activeAnimations = [];
        let letterCount = 0;
        let animationSpeed = 1;
        
        // Colores para las letras
        const letterColors = [
            '#ff6b6b', '#ff8e8e', '#ffb6c1', '#ffd700', '#98fb98', 
            '#87ceeb', '#dda0dd', '#ffa07a', '#f0e68c', '#add8e6'
        ];
        
        // Estilos de fuentes para las letras
        const letterFonts = [
            'Arial, sans-serif', 
            'Verdana, sans-serif', 
            'Georgia, serif', 
            'Courier New, monospace',
            'Impact, sans-serif',
            'Comic Sans MS, cursive'
        ];
        
        // FunciÃ³n para crear y animar letras
        function createFallingLetters(artistName) {
            // Limpiar contenedor de letras
            lettersContainer.innerHTML = '';
            activeAnimations = [];
            letterCount = 0;
            updateLetterCounter();
            
            // Actualizar mensaje
            messageDiv.textContent = `Disfruta de la lluvia de letras de ${artistName}!`;
            
            // Obtener las letras del nombre del artista
            const letters = artistName.split('');
            
            letters.forEach((letter, index) => {
                // Crear mÃºltiples copias de cada letra
                for (let i = 0; i < 8; i++) {
                    setTimeout(() => {
                        if (isPaused) return;
                        
                        const letterElement = document.createElement('div');
                        letterElement.className = 'letter';
                        letterElement.textContent = letter;
                        
                        // Estilo aleatorio para cada letra
                        const randomColor = letterColors[Math.floor(Math.random() * letterColors.length)];
                        const randomFont = letterFonts[Math.floor(Math.random() * letterFonts.length)];
                        const randomSize = 30 + Math.random() * 30;
                        
                        letterElement.style.color = randomColor;
                        letterElement.style.fontFamily = randomFont;
                        letterElement.style.fontSize = randomSize + 'px';
                        
                        // PosiciÃ³n aleatoria
                        letterElement.style.left = Math.random() * 90 + 10 + 'vw';
                        letterElement.style.top = -50 + 'px';
                        
                        // AÃ±adir al contenedor
                        lettersContainer.appendChild(letterElement);
                        
                        // Animar la letra (caÃ­da desde arriba)
                        const animationId = animateLetter(letterElement);
                        activeAnimations.push(animationId);
                        
                        // Actualizar contador
                        letterCount++;
                        updateLetterCounter();
                    }, index * 400 + i * 600);
                }
            });
        }
        
        // FunciÃ³n para animar las letras (caÃ­da desde arriba)
        function animateLetter(letter) {
            const baseSpeed = 1 + Math.random() * 2;
            let speed = baseSpeed * animationSpeed;
            let yPos = parseFloat(letter.style.top);
            const rotation = Math.random() * 20 - 10;
            let currentRotation = 0;
            const swingSpeed = Math.random() * 0.05 + 0.02;
            let swingDirection = 1;
            let animationId;
            
            function move() {
                if (isPaused) {
                    animationId = requestAnimationFrame(move);
                    return;
                }
                
                // Actualizar velocidad por si cambiÃ³
                speed = baseSpeed * animationSpeed;
                
                yPos += speed;
                currentRotation += rotation * swingDirection;
                
                // Cambiar direcciÃ³n de rotaciÃ³n periÃ³dicamente
                if (Math.abs(currentRotation) > 20) {
                    swingDirection *= -1;
                }
                
                // Reiniciar posiciÃ³n cuando sale por abajo de la pantalla
                if (yPos > window.innerHeight + 50) {
                    yPos = -50;
                    letter.style.left = Math.random() * 80 + 10 + 'vw';
                    
                    // Cambiar color y fuente al reiniciar
                    const randomColor = letterColors[Math.floor(Math.random() * letterColors.length)];
                    const randomFont = letterFonts[Math.floor(Math.random() * letterFonts.length)];
                    letter.style.color = randomColor;
                    letter.style.fontFamily = randomFont;
                }
                
                letter.style.top = yPos + 'px';
                letter.style.transform = `rotate(${currentRotation}deg)`;
                
                animationId = requestAnimationFrame(move);
            }
            
            move();
            return animationId;
        }
        
        // FunciÃ³n para actualizar el contador de letras
        function updateLetterCounter() {
            letterCounter.textContent = `Letras: ${letterCount}`;
        }
        
        // AÃ±adir event listeners a las sugerencias
        suggestionChips.forEach(chip => {
            chip.addEventListener('click', () => {
                const artistName = chip.getAttribute('data-search');
                createFallingLetters(artistName);
            });
        });
        
        // Control de pausa
        pauseBtn.addEventListener('click', () => {
            isPaused = !isPaused;
            pauseBtn.textContent = isPaused ? 'Reanudar' : 'Pausar';
            messageDiv.textContent = isPaused ? 'AnimaciÃ³n pausada' : 'AnimaciÃ³n reanudada';
            setTimeout(() => {
                if (!isPaused) messageDiv.textContent = lettersContainer.children.length > 0 
                    ? messageDiv.textContent : 'Haz clic en un artista para comenzar';
            }, 2000);
        });
        
        // Control de limpieza
        clearBtn.addEventListener('click', () => {
            lettersContainer.innerHTML = '';
            activeAnimations.forEach(id => cancelAnimationFrame(id));
            activeAnimations = [];
            letterCount = 0;
            updateLetterCounter();
            messageDiv.textContent = 'Letras limpiadas. Selecciona un artista!';
        });
        
        // Control de velocidad
        speedUpBtn.addEventListener('click', () => {
            animationSpeed = animationSpeed === 1 ? 2 : 1;
            speedUpBtn.textContent = animationSpeed === 1 ? 'Acelerar' : 'Ralentizar';
            messageDiv.textContent = animationSpeed === 1 ? 'Velocidad normal' : 'Velocidad acelerada';
            setTimeout(() => {
                messageDiv.textContent = lettersContainer.children.length > 0 
                    ? messageDiv.textContent : 'Haz clic en un artista para comenzar';
            }, 2000);
        });
    </script>
</body>
</html>
